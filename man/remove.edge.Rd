% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Updating.R
\name{remove.edge}
\alias{remove.edge}
\title{Log Bayesian evidence estimation of a model obtained by removing an edge from the models associated graph}
\usage{
remove.edge(
  gra,
  j,
  clu_al = NULL,
  lbe,
  obs,
  res,
  est_thres = 30,
  mtb = Inf,
  mts = Inf,
  par_no = 1000,
  rfun,
  pdf_fun,
  efsamp = par_no/2,
  methas = 1
)
}
\arguments{
\item{gra}{`igraph` object which contains the information of the graph of
the current model}

\item{j}{Index of the edge which will be removed from the graph}

\item{clu_al}{A vector detailing the cluster allocation of each observation.
If not specified the function will generate this vector.}

\item{lbe}{A vector detailing the log Bayesian evidences of all the
sub-models defined by the separated components of `gra`}

\item{obs}{Covariate matrix}

\item{res}{Binary response vector}

\item{est_thres}{The threshold for which the number of observations needs to
exceed to consider using BIC as an estimator. Defaults to 30 if not
specified.}

\item{mtb}{The threshold for when it is deemed worthwhile to
check the cache of function `memo.bic` for similar observation indices.
Defaults to never checking the cache. See `lbe.gen` for details.}

\item{mts}{The threshold for when it is deemed worthwhile to
check the cache of function `IBIS.Z` for similar observation indices.
Defaults to never checking the cache. See `lbe.gen` for details.}

\item{par_no}{Number of samples of the prior used for the SMC sampler.
Defaults to 1000 if not specified.}

\item{rfun}{Function to sample from the prior. Must only have two arguments,
`p_n` and `di` (Number of prior samples to generate and the number of
dimensions of a single sample respectively).}

\item{pdf_fun}{Probability Density Function of the prior. Must only have two
arguments, `th` and `di` (a vector or matrix of regression coefficients
samples and the number of dimensions of a single sample respectively).}

\item{efsamp}{Threshold: if the effective sample size of the particle weights
falls below this value then a resample move step is triggered. Defaults to
`p_num/2`. See `IBIS.Z` for details.}

\item{methas}{Number of Metropolis-Hastings steps to apply each time a
resample move step is triggered. Defaults to 1. See `IBIS.Z` for details.}
}
\value{
A list consisting of; the cluster allocation vector of the new
model, the resulting Bayesian evidence vector for the new model and an
`igraph` object containing information on the new graph.
}
\description{
This function removes an edge from the graph, creating a further partition of the data, then calculates the Bayesian evidence of the new model created by this removal.

Used in UNCOVER to check if the removal of certain edges is beneficial to the model.
}
\details{
Requires a minimum spanning forest graph which defines components
for a multiplicative Bayesian logistic regression model. `lbe.gen` should be
used to obtain the log Bayesian evidence of this initial model before this
function is used.

If the clusters specified by the initial model have fixed labels then this should be specified by `clu_al`. `clu_al` must be a one of the possible labeling of the observations defined by the clusters of the graph. For example for a graph where there is only one connected component, if `clu_al` is specified it cannot be anything other than `rep(1,length(res)`.

For more details on the specifics of the possible estimation methods, see the help page of the function `lbe.gen`.
}
\examples{

# First we generate a covariate matrix `obs` and binary response vector `res`
CM <- matrix(rnorm(20),10,2)
rv <- sample(0:1,10,replace=T)

# We then generate the minimum spanning tree graph from CM
gra_CM <- one.stage.mst(obs = CM)
plot(gra_CM,layout=CM)

# If we assume the prior for the regression coefficients is a standard
# normal
pr_samp <- function(p_n,di){return(rmvn(p_n,rep(0,di),diag(di)))}
pr_fun <- function(th,di){return(dmvn(th,mu=rep(0,di),sigma=diag(di)))}

# Then we can generate the log Bayesian evidence for this one component
# model
lZ <- lbe.gen(obs_mat = CM,res_vec = rv, rpri = pr_samp, p_pdf = pr_fun)
lZ

# If we wished to remove the first edge in the graph we would have
er <- remove.edge(gra = gra_CM, j = 1, lbe = lZ, obs = CM, res = rv, rfun = pr_samp, pdf_fun = pr_fun)
clu_al.2 <- er[[1]]
lZ.2 <- er[[2]]
gra_CM.2 <- er[[3]]
plot(gra_CM.2,layout=CM)
lZ.2
sum(lZ.2)

# If we then wanted to remove the first edge of the newly formed graph
# gra_CM.2 we would have
er.2 <- remove.edge(gra = gra_CM.2, j = 1, clu_al = clu_al.2, lbe = lZ.2, obs = CM, res = rv, rfun = pr_samp, pdf_fun = pr_fun)
plot(er.2[[3]],layout=CM)
er.2[[2]]
sum(er.2[[2]])
}
\seealso{
[lbe.gen]
}
\keyword{edge}
\keyword{removal}
